// –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∏–≥—Ä—ã
const dictionaries = {
    standard: {
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
        words: [
            '–°–ê–ú–û–õ–Å–¢', '–ö–û–§–ï', '–ú–£–ó–´–ö–ê', '–î–û–ñ–î–¨', '–°–ú–ï–•', '–ö–ù–ò–ì–ê', '–°–û–õ–ù–¶–ï', '–ú–û–†–û–ñ–ï–ù–û–ï',
            '–¢–ï–õ–ï–§–û–ù', '–†–ê–î–£–ì–ê', '–ü–õ–Ø–ñ', '–§–û–¢–û–ì–†–ê–§–ò–Ø', '–¢–ê–ù–ï–¶', '–®–û–ö–û–õ–ê–î', '–ú–ï–ß–¢–ê', '–û–ö–ï–ê–ù',
            '–ü–†–ê–ó–î–ù–ò–ö', '–¶–í–ï–¢–û–ö', '–ó–í–ï–ó–î–ê', '–ü–£–¢–ï–®–ï–°–¢–í–ò–ï', '–î–†–£–ñ–ë–ê', '–°–ï–ú–¨–Ø', '–õ–Æ–ë–û–í–¨', '–°–ß–ê–°–¢–¨–ï',
            '–ö–û–¢–Å–ù–û–ö', '–ü–ï–°–ù–Ø', '–£–õ–´–ë–ö–ê', '–ó–ê–ö–ê–¢', '–í–ï–õ–û–°–ò–ü–ï–î', '–ü–ò–¶–¶–ê', '–ö–ò–ù–û', '–ò–ì–†–ê',
            '–õ–ï–¢–û', '–ó–ò–ú–ê', '–í–ï–°–ù–ê', '–û–°–ï–ù–¨', '–î–ï–†–ï–í–û', '–ì–û–†–ê', '–†–ï–ö–ê', '–ú–û–°–¢',
            '–ó–ê–ú–û–ö', '–ü–ò–†–ê–¢–°–¢–í–û', '–ö–û–°–ú–û–°', '–†–û–ë–û–¢', '–ú–ê–ì–ò–Ø', '–ü–†–ò–ù–¶–ï–°–°–ê', '–î–†–ê–ö–û–ù', '–°–û–ö–†–û–í–ò–©–ï',
            '–•–£–î–û–ñ–ù–ò–ö', '–í–†–ê–ß', '–£–ß–ò–¢–ï–õ–¨', '–ü–û–í–ê–†', '–ü–û–õ–ò–¶–ï–ô–°–ö–ò–ô', '–ê–ö–¢–Å–†', '–ú–£–ó–´–ö–ê–ù–¢', '–ü–ò–õ–û–¢',
            '–§–£–¢–ë–û–õ', '–ë–ê–°–ö–ï–¢–ë–û–õ', '–¢–ï–ù–ù–ò–°', '–ü–õ–ê–í–ê–ù–ò–ï', '–ë–ï–ì', '–ô–û–ì–ê', '–¢–ê–ù–¶–´', '–®–ê–•–ú–ê–¢–´',
            '–ö–û–ú–ü–¨–Æ–¢–ï–†', '–ò–ù–¢–ï–†–ù–ï–¢', '–ü–†–û–ì–†–ê–ú–ú–ê', '–ö–õ–ê–í–ò–ê–¢–£–†–ê', '–ú–´–®–ö–ê', '–ú–û–ù–ò–¢–û–†', '–ü–õ–ê–ù–®–ï–¢', '–ò–ì–†–£–®–ö–ê',
            '–ê–í–¢–û–ú–û–ë–ò–õ–¨', '–ü–û–ï–ó–î', '–ê–í–¢–û–ë–£–°', '–ú–û–¢–û–¶–ò–ö–õ', '–ö–û–†–ê–ë–õ–¨', '–í–ï–†–¢–û–õ–Å–¢', '–†–ê–ö–ï–¢–ê', '–ú–ï–¢–†–û',
            '–®–ö–û–õ–ê', '–£–ù–ò–í–ï–†–°–ò–¢–ï–¢', '–ë–ò–ë–õ–ò–û–¢–ï–ö–ê', '–ú–£–ó–ï–ô', '–¢–ï–ê–¢–†', '–¶–ò–†–ö', '–ó–û–û–ü–ê–†–ö', '–ü–ê–†–ö',
            '–ë–û–õ–¨–ù–ò–¶–ê', '–ê–ü–¢–ï–ö–ê', '–ú–ê–ì–ê–ó–ò–ù', '–†–ï–°–¢–û–†–ê–ù', '–ö–ê–§–ï', '–û–¢–ï–õ–¨', '–ë–ê–ù–ö', '–ü–û–ß–¢–ê'
        ]
    },
    advanced: {
        name: '–°–ª–æ–∂–Ω—ã–π',
        words: [
            '–ê–†–ì–£–ú–ï–ù–¢', '–§–ò–õ–û–°–û–§–ò–Ø', '–î–ï–ú–û–ö–†–ê–¢–ò–Ø', '–ò–†–û–ù–ò–ó–ò–†–û–í–ê–¢–¨', '–ú–ï–¢–ê–§–û–†–ê', '–ê–ù–ê–õ–ò–ó', '–ö–û–ù–¶–ï–ü–¶–ò–Ø', '–ü–ê–†–ê–î–û–ö–°',
            '–ö–ê–¢–ï–ì–û–†–ò–Ø', '–ö–†–ò–¢–ï–†–ò–ô', '–î–ò–õ–ï–ú–ú–ê', '–ì–ò–ü–û–¢–ï–ó–ê', '–ö–û–ú–ü–†–û–ú–ò–°–°', '–ò–ù–¢–£–ò–¶–ò–Ø', '–°–ü–ï–¶–ò–§–ò–ö–ê', '–°–¢–†–ê–¢–ï–ì–ò–Ø',
            '–≠–í–û–õ–Æ–¶–ò–Ø', '–¢–†–ê–î–ò–¶–ò–Ø', '–ò–ù–ù–û–í–ê–¶–ò–Ø', '–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê', '–ü–†–ò–û–†–ò–¢–ï–¢', '–ü–ï–†–°–ü–ï–ö–¢–ò–í–ê', '–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨', '–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø',
            '–ê–†–•–ò–¢–ï–ö–¢–£–†–ê', '–°–ò–ú–ú–ï–¢–†–ò–Ø', '–ü–†–û–ü–û–†–¶–ò–Ø', '–ö–û–ú–ü–û–ó–ò–¶–ò–Ø', '–°–¢–ò–õ–ò–°–¢–ò–ö–ê', '–≠–°–¢–ï–¢–ò–ö–ê', '–ì–ê–†–ú–û–ù–ò–Ø', '–†–ò–¢–ú',
            '–ü–°–ò–•–û–õ–û–ì–ò–Ø', '–≠–ú–ü–ê–¢–ò–Ø', '–ú–û–¢–ò–í–ê–¶–ò–Ø', '–ò–ù–¢–†–û–í–ï–†–¢', '–≠–ö–°–¢–†–ê–í–ï–†–¢', '–•–ê–†–ê–ö–¢–ï–†', '–¢–ï–ú–ü–ï–†–ê–ú–ï–ù–¢', '–õ–ò–ß–ù–û–°–¢–¨',
            '–≠–ö–û–ù–û–ú–ò–ö–ê', '–ò–ù–§–õ–Ø–¶–ò–Ø', '–ò–ù–í–ï–°–¢–ò–¶–ò–Ø', '–ö–†–ï–î–ò–¢', '–î–ò–í–ò–î–ï–ù–î', '–ê–ö–¶–ò–Ø', '–í–ê–õ–Æ–¢–ê', '–ë–Æ–î–ñ–ï–¢',
            '–¢–ï–•–ù–û–õ–û–ì–ò–Ø', '–ê–õ–ì–û–†–ò–¢–ú', '–ò–ù–¢–ï–†–§–ï–ô–°', '–ë–ê–ó–ê –î–ê–ù–ù–´–•', '–°–ï–†–í–ï–†', '–ü–†–û–¢–û–ö–û–õ', '–ê–†–•–ò–í', 'BACKUP',
            '–ë–ò–û–õ–û–ì–ò–Ø', '–ì–ï–ù–ï–¢–ò–ö–ê', '–≠–í–û–õ–Æ–¶–ò–Ø', '–ú–£–¢–ê–¶–ò–Ø', '–ê–î–ê–ü–¢–ê–¶–ò–Ø', '–≠–ö–û–°–ò–°–¢–ï–ú–ê', '–ë–ò–û–¢–û–ü', '–°–ò–ú–ë–ò–û–ó',
            '–§–ò–ó–ò–ö–ê', '–ì–†–ê–í–ò–¢–ê–¶–ò–Ø', '–ò–ù–ï–†–¶–ò–Ø', '–≠–ù–ï–†–ì–ò–Ø', '–ò–ú–ü–£–õ–¨–°', '–†–ï–ó–û–ù–ê–ù–°', '–ß–ê–°–¢–û–¢–ê', '–ê–ú–ü–õ–ò–¢–£–î–ê',
            '–•–ò–ú–ò–Ø', '–†–ï–ê–ö–¶–ò–Ø', '–ö–ê–¢–ê–õ–ò–ó–ê–¢–û–†', '–ö–ò–°–õ–û–¢–ê', '–©–Å–õ–û–ß–¨', '–ú–û–õ–ï–ö–£–õ–ê', '–ê–¢–û–ú', '–°–û–ï–î–ò–ù–ï–ù–ò–ï'
        ]
    }
};

let currentDictionary = 'standard';

// –°–ª—É—á–∞–π–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥
const teamNames = [
    ['ü¶Å –õ—å–≤—ã', 'üê∫ –í–æ–ª–∫–∏', 'ü¶Ö –û—Ä–ª—ã', 'üêØ –¢–∏–≥—Ä—ã', 'ü¶à –ê–∫—É–ª—ã', 'üî• –ü–ª–∞–º—è', '‚ö° –ú–æ–ª–Ω–∏–∏', 'üåü –ó–≤—ë–∑–¥—ã'],
    ['üöÄ –†–∞–∫–µ—Ç—ã', 'üíé –ê–ª–º–∞–∑—ã', 'üå™Ô∏è –í–∏—Ö—Ä–∏', 'üéØ –°–Ω–∞–π–ø–µ—Ä—ã', 'üóø –¢–∏—Ç–∞–Ω—ã', '‚ùÑÔ∏è –ê–π—Å–±–µ—Ä–≥–∏', 'üåà –†–∞–¥—É–≥–∏', 'üé≠ –ê–∫—Ç—ë—Ä—ã']
];

function generateRandomTeamNames() {
    const team1Names = [...teamNames[0]];
    const team2Names = [...teamNames[1]];
    
    const team1Name = team1Names[Math.floor(Math.random() * team1Names.length)];
    let team2Name = team2Names[Math.floor(Math.random() * team2Names.length)];
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–∞ —Ä–∞–∑–Ω—ã–µ
    while (team1Name === team2Name) {
        team2Name = team2Names[Math.floor(Math.random() * team2Names.length)];
    }
    
    return [team1Name, team2Name];
}

function generateNewTeamNames() {
    const [name1, name2] = generateRandomTeamNames();
    gameState.teams[0].name = name1;
    gameState.teams[1].name = name2;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const team1Header = document.querySelector('.team h3');
    const team2Header = document.querySelector('.team.team2 h3');
    
    if (team1Header) {
        team1Header.textContent = name1;
    }
    if (team2Header) {
        team2Header.textContent = name2;
    }
}

function getCurrentWords() {
    return dictionaries[currentDictionary].words;
}

// –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
let sounds = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤
async function initSounds() {
    if (!sounds) {
        sounds = {
            correct: new Tone.Oscillator(800, "triangle"),
            skip: new Tone.Oscillator(400, "sawtooth"),
            timeWarning: new Tone.Oscillator(600, "sine"),
            endRound: new Tone.Oscillator(300, "square"),
            victory: new Tone.Oscillator(1000, "triangle")
        };
    }
}

// –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤
async function playSound(soundType) {
    try {
        await Tone.start();
        await initSounds();
        
        const sound = sounds[soundType];
        if (sound) {
            sound.toDestination();
            sound.start();
            sound.stop(Tone.now() + 0.2);
        }
    } catch (error) {
        // –ó–≤—É–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤ (–≤ –ø–∞–º—è—Ç–∏ —Å–µ—Å—Å–∏–∏)
let savedNames = {
    team1: ['–ê–Ω–Ω–∞', '–ë–æ—Ä–∏—Å'],
    team2: ['–í–µ—Ä–∞', '–ì–ª–µ–±']
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω
function loadSavedNames() {
    document.getElementById('team1_player1').value = savedNames.team1[0];
    document.getElementById('team1_player2').value = savedNames.team1[1];
    document.getElementById('team2_player1').value = savedNames.team2[0];
    document.getElementById('team2_player2').value = savedNames.team2[1];
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω
function saveNames() {
    savedNames.team1[0] = document.getElementById('team1_player1').value;
    savedNames.team1[1] = document.getElementById('team1_player2').value;
    savedNames.team2[0] = document.getElementById('team2_player1').value;
    savedNames.team2[1] = document.getElementById('team2_player2').value;
}

let gameState = {
    teams: [
        { name: 'ü¶Å –õ—å–≤—ã', players: [], score: 0 },
        { name: 'üöÄ –†–∞–∫–µ—Ç—ã', players: [], score: 0 }
    ],
    currentTeam: 0,
    currentPlayer: 0,
    roundTime: 60,
    targetScore: 30,
    timer: null,
    timeLeft: 0,
    roundActive: false,
    usedWords: [],
    currentWord: '',
    roundStats: { correct: 0, skipped: 0 },
    round: 1,
    lastWordMode: false // –†–µ–∂–∏–º "–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö"
};

function startGame() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
    saveNames();
    
    gameState.teams[0].players = [
        document.getElementById('team1_player1').value || '–ò–≥—Ä–æ–∫ 1',
        document.getElementById('team1_player2').value || '–ò–≥—Ä–æ–∫ 2'
    ];
    
    gameState.teams[1].players = [
        document.getElementById('team2_player1').value || '–ò–≥—Ä–æ–∫ 1',
        document.getElementById('team2_player2').value || '–ò–≥—Ä–æ–∫ 2'
    ];

    currentDictionary = document.getElementById('dictionary').value;
    gameState.roundTime = parseInt(document.getElementById('roundTime').value);
    gameState.targetScore = parseInt(document.getElementById('targetScore').value);
    gameState.timeLeft = gameState.roundTime;
    gameState.lastWordMode = false;

    showScreen('game');
    updateDisplay();
    playSound('correct'); // –ó–≤—É–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
}

function showScreen(screenName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.getElementById('menuScreen').style.display = 'none';
    document.getElementById('setupScreen').style.display = 'none';
    document.getElementById('gameScreen').style.display = 'none';
    document.getElementById('resultsScreen').style.display = 'none';
    document.getElementById('rulesScreen').style.display = 'none';
    document.getElementById('aboutScreen').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    document.getElementById(screenName + 'Screen').style.display = 'block';
}

function showMenu() {
    showScreen('menu');
}

function showSetup() {
    showScreen('setup');
}

function showRules() {
    showScreen('rules');
}

function showAbout() {
    showScreen('about');
}

function updateDisplay() {
    const currentTeamName = gameState.lastWordMode ? 
        "üî• –ü–û–°–õ–ï–î–ù–ï–ï –°–õ–û–í–û - –í–°–ï –ö–û–ú–ê–ù–î–´!" : 
        gameState.teams[gameState.currentTeam].name;
        
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const currentTeamEl = document.getElementById('currentTeam');
    const team1ScoreEl = document.getElementById('team1Score');
    const team2ScoreEl = document.getElementById('team2Score');
    const timerEl = document.getElementById('timer');
    const roundInfoEl = document.getElementById('roundInfo');
    const roundCorrectEl = document.getElementById('roundCorrect');
    const roundSkippedEl = document.getElementById('roundSkipped');
    
    if (currentTeamEl) currentTeamEl.textContent = currentTeamName;
    if (team1ScoreEl) team1ScoreEl.textContent = gameState.teams[0].score;
    if (team2ScoreEl) team2ScoreEl.textContent = gameState.teams[1].score;
    if (timerEl) timerEl.textContent = gameState.lastWordMode ? '‚àû' : gameState.timeLeft;
    if (roundCorrectEl) roundCorrectEl.textContent = gameState.roundStats.correct;
    if (roundSkippedEl) roundSkippedEl.textContent = gameState.roundStats.skipped;
    
    if (roundInfoEl) {
        if (gameState.lastWordMode) {
            roundInfoEl.innerHTML = `–†–∞—É–Ω–¥ ${gameState.round} ‚Ä¢ <span style="color: #ff6b6b; font-weight: bold;">–ü–û–°–õ–ï–î–ù–ï–ï –°–õ–û–í–û –î–õ–Ø –í–°–ï–•!</span>`;
        } else {
            roundInfoEl.innerHTML = `–†–∞—É–Ω–¥ ${gameState.round} ‚Ä¢ –û–±—ä—è—Å–Ω—è–µ—Ç: <span>${gameState.teams[gameState.currentTeam].players[gameState.currentPlayer]}</span>`;
        }
    }

    if (timerEl) {
        if (gameState.timeLeft <= 10 && !gameState.lastWordMode) {
            timerEl.classList.add('warning');
        } else {
            timerEl.classList.remove('warning');
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
    const correctBtn = document.getElementById('correctBtn');
    const skipBtn = document.getElementById('skipBtn');
    const endRoundBtn = document.getElementById('endRoundBtn');
    
    if (gameState.lastWordMode && gameState.roundActive) {
        if (correctBtn) {
            correctBtn.textContent = `‚úÖ ${gameState.teams[0].name}`;
            correctBtn.classList.remove('hidden');
        }
        if (skipBtn) {
            skipBtn.textContent = `‚úÖ ${gameState.teams[1].name}`;
            skipBtn.classList.remove('hidden');
        }
        if (endRoundBtn) endRoundBtn.classList.add('hidden');
    } else if (gameState.roundActive) {
        if (correctBtn) correctBtn.textContent = '‚úÖ –£–≥–∞–¥–∞–ª–∏';
        if (skipBtn) skipBtn.textContent = '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
        if (endRoundBtn) endRoundBtn.classList.remove('hidden');
    }
}

function getRandomWord() {
    const words = getCurrentWords();
    let availableWords = words.filter(word => !gameState.usedWords.includes(word));
    if (availableWords.length === 0) {
        gameState.usedWords = [];
        availableWords = words;
    }
    
    const randomIndex = Math.floor(Math.random() * availableWords.length);
    const word = availableWords[randomIndex];
    gameState.usedWords.push(word);
    return word;
}

function startRound() {
    gameState.roundActive = true;
    gameState.timeLeft = gameState.roundTime;
    gameState.roundStats = { correct: 0, skipped: 0 };
    
    document.getElementById('startRoundBtn').classList.add('hidden');
    document.getElementById('correctBtn').classList.remove('hidden');
    document.getElementById('skipBtn').classList.remove('hidden');
    document.getElementById('endRoundBtn').classList.remove('hidden');
    document.getElementById('roundStats').classList.remove('hidden');

    nextWord();
    startTimer();
}

function startTimer() {
    gameState.timer = setInterval(() => {
        if (gameState.lastWordMode) {
            // –í —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞ —Ç–∞–π–º–µ—Ä –Ω–µ —Ç–∏–∫–∞–µ—Ç
            return;
        }
        
        gameState.timeLeft--;
        
        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º "–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ" –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        if (gameState.timeLeft === 10 && !gameState.lastWordMode) {
            gameState.lastWordMode = true;
            playSound('timeWarning');
            nextWord(); // –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
            updateDisplay();
            return; // –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
        }
        
        // –ó–≤—É–∫–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
        if (gameState.timeLeft <= 5 && gameState.timeLeft > 0) {
            playSound('timeWarning');
        }
        
        updateDisplay();
        
        if (gameState.timeLeft <= 0) {
            endRound();
        }
    }, 1000);
}

function nextWord() {
    gameState.currentWord = getRandomWord();
    document.getElementById('currentWord').textContent = gameState.currentWord;
}

function correctWord() {
    if (!gameState.roundActive) return;
    
    playSound('correct');
    
    if (gameState.lastWordMode) {
        // –í —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞ –æ—á–∫–æ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ 1
        gameState.teams[0].score++;
        gameState.roundStats.correct++;
    } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –æ—á–∫–æ –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        gameState.teams[gameState.currentTeam].score++;
        gameState.roundStats.correct++;
    }
    
    updateDisplay();
    
    if (gameState.teams[0].score >= gameState.targetScore || gameState.teams[1].score >= gameState.targetScore) {
        endGame();
        return;
    }
    
    if (!gameState.lastWordMode) {
        nextWord();
    } else {
        // –í —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞ —Ä–∞—É–Ω–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
        endRound();
    }
}

function skipWord() {
    if (!gameState.roundActive) return;
    
    if (gameState.lastWordMode) {
        // –í —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 2
        playSound('correct');
        gameState.teams[1].score++;
        gameState.roundStats.correct++;
        
        updateDisplay();
        
        if (gameState.teams[1].score >= gameState.targetScore) {
            endGame();
            return;
        }
        
        endRound();
    } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–ø—É—Å–∫ —Å–ª–æ–≤–∞
        playSound('skip');
        gameState.roundStats.skipped++;
        updateDisplay();
        nextWord();
    }
}

function endRound() {
    if (gameState.timer) {
        clearInterval(gameState.timer);
        gameState.timer = null;
    }
    
    gameState.roundActive = false;
    gameState.lastWordMode = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
    
    playSound('endRound');
    
    document.getElementById('startRoundBtn').classList.remove('hidden');
    document.getElementById('correctBtn').classList.add('hidden');
    document.getElementById('skipBtn').classList.add('hidden');
    document.getElementById('endRoundBtn').classList.add('hidden');
    document.getElementById('roundStats').classList.add('hidden');
    
    document.getElementById('currentWord').textContent = '–†–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω';
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ
    gameState.currentTeam = (gameState.currentTeam + 1) % 2;
    
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
    if (gameState.currentTeam === 0) {
        gameState.currentPlayer = (gameState.currentPlayer + 1) % 2;
        gameState.round++;
    }
    
    updateDisplay();
}

function endGame() {
    if (gameState.timer) {
        clearInterval(gameState.timer);
        gameState.timer = null;
    }
    
    playSound('victory');
    
    showScreen('results');
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const finalScore1 = document.getElementById('finalScore1');
    const finalScore2 = document.getElementById('finalScore2');
    const winnerElement = document.getElementById('winner');
    
    if (finalScore1) finalScore1.textContent = gameState.teams[0].score;
    if (finalScore2) finalScore2.textContent = gameState.teams[1].score;
    
    const winner = gameState.teams[0].score >= gameState.targetScore ? 
        gameState.teams[0].name : gameState.teams[1].name;
    if (winnerElement) winnerElement.textContent = `${winner} –ø–æ–±–µ–¥–∏–ª–∞!`;
}

function newGame() {
    gameState = {
        teams: [
            { name: '–ö–æ–º–∞–Ω–¥–∞ 1', players: gameState.teams[0].players, score: 0 },
            { name: '–ö–æ–º–∞–Ω–¥–∞ 2', players: gameState.teams[1].players, score: 0 }
        ],
        currentTeam: 0,
        currentPlayer: 0,
        roundTime: gameState.roundTime,
        targetScore: gameState.targetScore,
        timer: null,
        timeLeft: gameState.roundTime,
        roundActive: false,
        usedWords: [],
        currentWord: '',
        roundStats: { correct: 0, skipped: 0 },
        round: 1,
        lastWordMode: false
    };
    
    showScreen('game');
    document.getElementById('currentWord').textContent = '–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥"';
    updateDisplay();
}

function backToSetup() {
    showScreen('setup');
}

function backToMenu() {
    showScreen('menu');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.addEventListener('load', () => {
    loadSavedNames();
    generateNewTeamNames(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateDisplay();
    showMenu(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
});